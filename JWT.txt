using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System;
using System.Text;
using System.Threading.Tasks;
using System.Security.Claims;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Authorization;
//////////////////////////////////////////////////////////controllerCTOR///////////////
   public IConfiguration _configuration;
        public Class(IConfiguration configuration)
        {
            _configuration = configuration;
        }
///////////////////////////////////////////////////////////////////////////////////////
    	 var claims = new[]
                {
                    new Claim(JwtRegisteredClaimNames.Sub,_configuration["Jwt:Subject"])  ,
                    new Claim (JwtRegisteredClaimNames.Jti,Guid.NewGuid().ToString()),
                    new Claim  (JwtRegisteredClaimNames.Iat,DateTime.UtcNow.ToString()),
                    new Claim  ("id", user.Id.ToString()),
                    new Claim  ("FirstName", user.Name),
                    new Claim  ("UserName", user.Username),
                    new Claim  ("Email", user.Email)
                };
                var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
                var signIn = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
                var token = new JwtSecurityToken(_configuration["Jwt:Issuer"], _configuration["Jwt:Audience"], claims, expires: 		DateTime.UtcNow.AddDays(1), signingCredentials: signIn);
                //return Ok(new JwtSecurityTokenHandler().WriteToken(token))
                user.token = new JwtSecurityTokenHandler().WriteToken(token);
////////////////////////////////////////////////////////////////////////////////////////
        [Authorize]
////////////////////////////////////////////////////////////////////////StartUp////////////////
 services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(
                          options =>
                          {
                              options.RequireHttpsMetadata = false;
                              options.SaveToken = true;
                              options.TokenValidationParameters = new TokenValidationParameters()
                              {
                                  ValidateIssuer = true,
                                  ValidateAudience = true,
                                  ValidAudience = Configuration["Jwt:Audience"],
                                  ValidIssuer = Configuration["Jwt:Issuer"],
                                  IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Key"]))
                              };
                          }); services.AddControllers();
///////////////////////////////////////////////////////////////////////////////////////////////
    	   app.UseAuthentication();
           app.UseAuthorization();
//////////////////////////////////////////////////////////////////////////////////////////////
  "Jwt": {
    "Key": "Mina-Emad@Radi160348",
    "Issuer": "MinaEmadRadiServer",
    "Audience": "MinaEmadRadiClient",
    "Subject": "MinaEmadRadiAPIAccessToken"
  }
